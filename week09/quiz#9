# Quiz #9

1. Which of the following is the proper declaration of a pointer?
A. int x;
B. int &x;
C. ptr x;
D. int *x;

2. Which of the following gives the memory address of integer variable a?
A. *a;
B. a;
C. &a;
D. address(a);

3. Which of the following gives the memory address of a variable pointed to by pointer a?
A. a;
B. *a;
C. &a;
D. address(a);

4. Which of the following gives the value stored at the address pointed to by the pointer a?
A. a;
B. val(a);
C. *a;
D. &a;

5. What is the output of following program?
# include <stdio.h>
void fun(int x)
{
    x = 30;
}
 
int main()
{
  int y = 20;
  fun(y);
  printf("%d", y);
  return 0;
}

6. Output of following program?
# include <stdio.h>
void fun(int *ptr)
{
    *ptr = 30;
}
 
int main()
{
  int y = 20;
  fun(&y);
  printf("%d", y);
 
  return 0;
}

7.Output of following program?
#include <stdio.h>
 
int main()
{
    int *ptr;
    int x;
 
    ptr = &x;
    *ptr = 0;
 
    printf(" x = %d\n", x);
    printf(" *ptr = %d\n", *ptr);
 
    *ptr += 5;
    printf(" x  = %d\n", x);
    printf(" *ptr = %d\n", *ptr);
 
    (*ptr)++;
    printf(" x = %d\n", x);
    printf(" *ptr = %d\n", *ptr);
 
    return 0;
}

8. Consider a compiler where int takes 4 bytes, char takes 1 byte and pointer takes 4 bytes.
#include <stdio.h>
 
int main()
{
    int arri[] = {1, 2 ,3};
    int *ptri = arri;
 
    char arrc[] = {1, 2 ,3};
    char *ptrc = arrc;
 
    printf("sizeof arri[] = %d ", sizeof(arri));
    printf("sizeof ptri = %d ", sizeof(ptri));
 
    printf("sizeof arrc[] = %d ", sizeof(arrc));
    printf("sizeof ptrc = %d ", sizeof(ptrc));
 
    return 0;
}

9. Assume that float takes 4 bytes, predict the output of following program.
#include <stdio.h>
 
int main()
{
    float arr[5] = {12.5, 10.0, 13.5, 90.5, 0.5};
    float *ptr1 = &arr[0];
    float *ptr2 = ptr1 + 3;
 
    printf("%f ", *ptr2);
    printf("%d", ptr2 - ptr1);
 
   return 0;
}
10.#include<stdio.h> 
void f(int *p, int *q) 
{ 
  p = q; 
  *p = 2; 
} 
int i = 0, j = 1; 
int main() 
{ 
  f(&i, &j); 
  printf("%d %d \n", i, j); 
  getchar(); 
  return 0; 
}

11.#include <stdio.h>
int main()
{
    int arr[] = {1, 2, 3, 4, 5};
    int *p = arr;
    ++*p;
    p += 2;
    printf("%d", *p);
    return 0;
}

12.
In the below statement, ptr1 and ptr2 are uninitialized pointers to int i.e. they are pointing to some random address that may or may not be valid address.
int* ptr1, ptr2;
A
TRUE
B
FALSE

13. 
#include <iostream>
using namespace std; 
int main()
{
      int var;  /*Suppose address of var is 2000 */

     int *ptr = &var;
     *ptr = 5;
    cout << var << *ptr;
             
 return 0;
}

14.
void f(int* p, int m)
{
    m = m + 5;
    *p = *p + m;
    return;
}
void main()
{
    int i=5, j=10;
    f(&i, j);
    printf("%d", i+j);
}

15.
What is the return value of f(p, p) if the value of p is initialized to 5 before the call? Note that the first parameter is passed by reference, whereas the second parameter is passed by value.
int f(int &x, int c) {
   c  = c - 1;
   if (c == 0) return 1;
   x = x + 1;
   return f(x, c) * x;
} 


A
3024
B
6561
C
55440
D
161051

16.
Which of the following is FALSE about references in C++
A
References cannot be NULL
B
A reference must be initialized when declared
C
Once a reference is created, it cannot be later made to reference another object; it cannot be reset.
D
References cannot refer to constant value

17.

Output of following C++ program?
#include<iostream>
using namespace std;
 
int main()
{
  int x = 10;
  int& ref = x;
  ref = 20;
  cout << "x = " << x << endl ;
  x = 30;
  cout << "ref = " << ref << endl;
  return 0;
}
Run on IDE
A
x = 20
ref = 30
B
x = 20
ref = 20
C
x = 10
ref = 30
D
x = 30
ref = 30

18.
void fun(int *p) 
{ 
  int q = 10; 
  p = &q; 
}     
   
int main() 
{ 
  int r = 20; 
  int *p = &r; 
  fun(p); 
  printf("%d", *p); 
  return 0; 
}

1. What do pointers hold?
    a) values
    b) functions
    c) addresses

2. How do you declare a pointer that will hold an integer type?
    a) int *p
    b) int &p
    c) int p

3. What symbol in C must be used to recieve the address of a variable?
    a) &
    b) %
    c) *

4. What is the correct way to assign the pointer p to the address of x?
    a) *p=&x
    b) p=%x
    c) p=&x

5. When using pointers in a function what must be sent to the function?
    a) variable
    b) value
    c) address of variable

6. True or false, a pointer int *p is declared, it is able to hold addresses of double type values as well.
    a) true
    b) false

